name: emulate
description: Emulate unsupported operating systems using QEMU.
inputs:
  operating-system:
    description: The operating-system specifier.
    required: true
runs:
  using: composite
  steps:
  - name: Boot guest ${{ inputs.operating-system }}.
    shell: bash
    working-directory: ${{ runner.temp }}
    env:
      EMULATE_OPERATING_SYSTEM: ${{ inputs.operating-system }}
    run: |
      # Install Vagrant, VirtualBox
      wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt-get update --quiet --quiet
      sudo apt-get install --quiet --quiet vagrant virtualbox

      case "$EMULATE_OPERATING_SYSTEM" in
        openbsd-latest) EMULATE_OPERATING_SYSTEM=openbsd-7.6 ;;
        freebsd-latest) EMULATE_OPERATING_SYSTEM=freebsd-13.0 ;;
        netbsd-latest)  EMULATE_OPERATING_SYSTEM=netbsd-9.2 ;;
      esac

      # >VAGRANT_HOME can be set to change the directory where Vagrant
      # >stores global state. By default, this is set to ~/.vagrant.d.
      #
      # Because ~/.vagrant.d is not readable/writable on the macos-12.15
      # runner, we need to create a new readable/writeable VAGRANT_HOME.
      #export VAGRANT_HOME="$(mktemp -d)"

      # >VAGRANT_CWD can be set to change the working directory of Vagrant.
      # >By default, Vagrant uses the current directory you are in. The working
      # >directory is important because it is where Vagrant looks for the Vagrantfile.
      #
      # While we can `cd` into the proper Vagrant directory (and did once),
      # setting the VAGRANT_CWD environment variable is cleaner.
      export VAGRANT_CWD="$GITHUB_ACTION_PATH/$EMULATE_OPERATING_SYSTEM"

      # Generate a Bash script that will hijack/interrupt the original
      # Actions-user-specified run step and proxy the contents of that
      # run step to the guest VM.
      EMULATE_BASH_HIJACKER="$(mktemp)"
      cat >"$EMULATE_BASH_HIJACKER" <<EOF
      # Proxy the body of the run step to the guest virtual machine.
      # It's important that this is `exec`uted, because this is what
      # causes this BASH_ENV script to "hijack" the original script's
      # execution. 
      #VAGRANT_HOME="$VAGRANT_HOME" VAGRANT_CWD="$VAGRANT_CWD" exec vagrant ssh --no-tty < "\$RUN_SCRIPT"
      echo "\\\$0 = \$0"
      echo "\\\$1 = \$1"
      echo "\\\$2 = \$2"
      VAGRANT_CWD="$VAGRANT_CWD" exec vagrant ssh -c 'exec ksh -s' < "\$(ps -p \$$ -o args= | xargs -n 1 | tail -n 1)"
      EOF

      # Set $BASH_ENV to execute our "hijack" script before the BSD commands are
      # executed in an Ubuntu Linux bash process.
      # https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html
      echo "BASH_ENV=$EMULATE_BASH_HIJACKER" >> "$GITHUB_ENV"
      vagrant up
